name: Danda420-alioth-builder

on:
  workflow_dispatch:
    inputs:
      KERNEL_TREE:
        description: 'Kernel Tree URL'
        default: 'https://github.com/Danda420/kernel_xiaomi_sm8250'
        required: true
      BRANCH:
        description: 'Kernel Branch'
        default: 'walt'
        required: true
      CODENAME:
        description: 'Device codename (alioth/apollo/munch)'
        default: 'alioth'
        required: true
      CUSTOM_VERSION:
        description: 'Custom kernel version (ex: -Oxygen)'
        default: '-Oxygen'
        required: false
      LTO_TYPE:
        description: 'Choose LTO type (full_lto or thin_lto)'
        type: choice
        options:
          - full_lto
          - thin_lto
        default: full_lto
      COMPILER:
        description: 'Choose Clang compiler'
        type: choice
        options:
          - proton
          - aosp
          - aosp21
        default: proton

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y bc bison flex build-essential zip curl libssl-dev \
              ccache python3 rsync lz4 git unzip wget

      - name: Download Clang
        run: |
          if [[ "${{ github.event.inputs.COMPILER }}" == "aosp" ]]; then
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
            mkdir clang && tar -xf clang.tar.gz -C clang
          elif [[ "${{ github.event.inputs.COMPILER }}" == "aosp21" ]]; then
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/d0e0a3882edb1acc193263ae98fce706e82aca38/clang-r574158.tar.gz -O clang.tar.gz
            mkdir clang && tar -xf clang.tar.gz -C clang
          else
            git clone --depth=1 https://github.com/kdrag0n/proton-clang clang
          fi

      - name: Clone Kernel Source
        run: |
          git clone --depth=1 -b "${{ github.event.inputs.BRANCH }}" \
            "${{ github.event.inputs.KERNEL_TREE }}" kernel_tree

      - name: Configure Build Environment
        run: |
          export PATH="$PWD/clang/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="github"
          export KBUILD_BUILD_HOST="actions"
          export KBUILD_BUILD_TIMESTAMP="$(TZ=Asia/Jakarta date)"
          mkdir -p kernel_tree/out
          cd kernel_tree
          make O=out vendor/${{ github.event.inputs.CODENAME }}_defconfig

          # Apply custom LOCALVERSION if defined
          if [[ "${{ github.event.inputs.CUSTOM_VERSION }}" != "" ]]; then
            sed -i "s/CONFIG_LOCALVERSION=\".*\"/CONFIG_LOCALVERSION=\"${{ github.event.inputs.CUSTOM_VERSION }}\"/" arch/arm64/configs/vendor/${{ github.event.inputs.CODENAME }}_defconfig || true
          fi

          # Adjust LTO mode if thin_lto is chosen
          if [[ "${{ github.event.inputs.LTO_TYPE }}" == "thin_lto" ]]; then
            sed -i '/CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set' arch/arm64/configs/vendor/${{ github.event.inputs.CODENAME }}_defconfig || true
            sed -i '/# CONFIG_LTO_CLANG_THIN is not set/c\CONFIG_LTO_CLANG_THIN=y' arch/arm64/configs/vendor/${{ github.event.inputs.CODENAME }}_defconfig || true
          fi

      - name: Build Kernel
        id: build_kernel
        run: |
          export PATH="$PWD/clang/bin:$PATH"
          cd kernel_tree
          make -j$(nproc) O=out CC=clang LLVM=1 LLVM_IAS=1 2>&1 | tee build.log
          echo "BUILD_STATUS=$?" >> $GITHUB_ENV

      - name: Save last 20 lines of log
        if: failure()
        run: |
          cd kernel_tree
          tail -n 20 build.log > ../build_fail_summary.txt

      - name: Upload Kernel Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.event.inputs.CODENAME }}
          path: |
            kernel_tree/out/arch/arm64/boot/Image*
            kernel_tree/out/arch/arm64/boot/dtb*
            kernel_tree/out/arch/arm64/boot/dtbo*

      - name: Upload Failure Log (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-failure-log
          path: build_fail_summary.txt

  package:
    needs: build
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Download Kernel Build
        uses: actions/download-artifact@v4
        with:
          name: kernel-build-${{ github.event.inputs.CODENAME }}
          path: out

      - name: Clone AnyKernel3
        run: git clone --depth=1 https://github.com/osm0sis/AnyKernel3 AnyKernel3

      - name: Copy kernel output to AnyKernel3
        run: |
          cp out/Image* AnyKernel3/ || true
          cp out/dtb* AnyKernel3/ || true
          cp out/dtbo* AnyKernel3/ || true

      - name: Package Flashable ZIP
        run: |
          cd AnyKernel3
          zipname="DandaKernel-${{ github.event.inputs.CODENAME }}${{ github.event.inputs.CUSTOM_VERSION }}-$(date +%Y%m%d).zip"
          zip -r9 "../$zipname" * -x .git* README.md *placeholder*
          echo "ZIP_NAME=$zipname" >> $GITHUB_ENV

      - name: Upload Flashable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}

  telegram_notify:
    needs: [build, package]
    runs-on: ubuntu-latest

    steps:
      - name: Notify Telegram (Success)
        if: success()
        run: |
          MESSAGE="‚úÖ *Build Sukses!*\n\
          üì± Device: ${{ github.event.inputs.CODENAME }}\n\
          ‚öôÔ∏è Compiler: ${{ github.event.inputs.COMPILER }}\n\
          üß© LTO: ${{ github.event.inputs.LTO_TYPE }}\n\
          üè∑ Version: ${{ github.event.inputs.CUSTOM_VERSION }}\n\
          üìÖ $(date +'%Y-%m-%d %H:%M')"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d parse_mode="Markdown" \
          -d text="$MESSAGE"

          ZIP_PATH=$(ls DandaKernel-${{ github.event.inputs.CODENAME }}*.zip 2>/dev/null | head -n1 || true)
          if [[ -f "$ZIP_PATH" ]]; then
            curl -F chat_id=${{ secrets.TG_CHAT_ID }} \
                 -F document=@"$ZIP_PATH" \
                 -F caption="üì¶ DandaKernel build complete! (`${{ github.event.inputs.CUSTOM_VERSION }}`)" \
                 https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument
          fi

      - name: Notify Telegram (Failure)
        if: failure()
        run: |
          LOG_FILE="build_fail_summary.txt"
          if [[ -f "$LOG_FILE" ]]; then
            LOG_CONTENT=$(cat "$LOG_FILE")
          else
            LOG_CONTENT="(Tidak ada log ringkasan ditemukan)"
          fi
          MESSAGE="‚ùå *Build Gagal!*\n\
          üì± Device: ${{ github.event.inputs.CODENAME }}\n\
          ‚öôÔ∏è Compiler: ${{ github.event.inputs.COMPILER }}\n\
          üß© LTO: ${{ github.event.inputs.LTO_TYPE }}\n\
          üè∑ Version: ${{ github.event.inputs.CUSTOM_VERSION }}\n\n\
          üîç *Ringkasan Log Error:*\n\`\`\`\n${LOG_CONTENT}\n\`\`\`"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d parse_mode="Markdown" \
          -d text="$MESSAGE"
