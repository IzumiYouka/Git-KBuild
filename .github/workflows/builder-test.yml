name: DandaKernel-Alioth-Clang18

on:
  workflow_dispatch:
    inputs:
      CUSTOM_VERSION:
        description: 'Custom kernel version (e.g. -Oxygen)'
        default: '-Oxygen'
        required: false
      LTO_TYPE:
        description: 'Choose LTO type (full_lto or thin_lto)'
        type: choice
        options:
          - full_lto
          - thin_lto
        default: full_lto

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            bc bison flex build-essential zip curl libssl-dev \
            ccache python3 rsync lz4 git unzip wget \
            libelf-dev liblz4-tool dwarves lld llvm clang-tools

      - name: Download Clang 18.0.1 (Android prebuilts)
        run: |
          echo "‚öôÔ∏è Downloading Clang 18.0.1 prebuilts..."
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r588983b.tar.gz -O clang.tar.gz
          mkdir clang && tar -xf clang.tar.gz -C clang

      - name: Clone Danda Kernel Source (walt branch)
        run: |
          git clone --depth=1 -b walt https://github.com/Danda420/kernel_xiaomi_sm8250 kernel_tree

      - name: Clone AnyKernel3 Template
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3 AnyKernel3

      - name: Patch for Clang 18 Compatibility
        run: |
          cd kernel_tree
          echo "ü©π Patching kernel source for Clang 18..."
          sed -i 's/register unsigned long current_stack_pointer asm ("sp");/unsigned long current_stack_pointer; \/\/ patched for clang18/g' arch/arm64/include/asm/stack_pointer.h || true
          sed -i 's/"I" (KGDB_COMPILED_DBG_BRK_IMM)/"r" (KGDB_COMPILED_DBG_BRK_IMM)/g' arch/arm64/include/asm/kgdb.h || true
          sed -i 's/asm("x0")/asm("r0")/g; s/asm("x1")/asm("r1")/g; s/asm("x8")/asm("r8")/g' arch/arm64/include/asm/vdso/gettimeofday.h || true

      - name: Configure & Build Kernel
        run: |
          export PATH="$PWD/clang/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="github"
          export KBUILD_BUILD_HOST="actions"
          export KBUILD_BUILD_TIMESTAMP="$(TZ=Asia/Jakarta date)"
          cd kernel_tree

          echo "üß© Using defconfig: vendor/alioth_defconfig"
          make O=out vendor/alioth_defconfig

          if [[ "${{ github.event.inputs.CUSTOM_VERSION }}" != "" ]]; then
            sed -i "s/CONFIG_LOCALVERSION=\".*\"/CONFIG_LOCALVERSION=\"${{ github.event.inputs.CUSTOM_VERSION }}\"/" \
              arch/arm64/configs/vendor/alioth_defconfig || true
          fi

          if [[ "${{ github.event.inputs.LTO_TYPE }}" == "thin_lto" ]]; then
            sed -i '/CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set' arch/arm64/configs/vendor/alioth_defconfig || true
            sed -i '/# CONFIG_LTO_CLANG_THIN is not set/c\CONFIG_LTO_CLANG_THIN=y' arch/arm64/configs/vendor/alioth_defconfig || true
          fi

          echo "üöÄ Building kernel..."
          make -j$(nproc) O=out CC=clang LLVM=1 LLVM_IAS=1 2>&1 | tee build.log

          if [[ ! -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            echo "‚ùå Kernel build failed, Image.gz-dtb not found."
            exit 1
          fi

          cp out/arch/arm64/boot/Image.gz-dtb ../Image.gz-dtb
          echo "‚úÖ Kernel built successfully."

      - name: Package with AnyKernel3
        run: |
          COMPILED_DATE=$(date +%Y%m%d)
          ZIP_NAME="DandaKernel-Alioth-Clang18${{ github.event.inputs.CUSTOM_VERSION }}-${COMPILED_DATE}.zip"

          cp Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          zip -r9 "../${ZIP_NAME}" * -x .git README.md .github
          cd ..

          echo "üì¶ Flashable zip created: ${ZIP_NAME}"

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DandaKernel-Alioth-Clang18
          path: |
            Image.gz-dtb
            *.zip

      - name: Upload Build Log (Always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: kernel_tree/build.log
