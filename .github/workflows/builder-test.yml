name: DandaKernel-AliothBuilder

on:
  workflow_dispatch:
    inputs:
      CUSTOM_VERSION:
        description: 'Custom kernel version (e.g. -Oxygen)'
        default: '-Oxygen'
        required: false
      LTO_TYPE:
        description: 'Choose LTO type (full_lto or thin_lto)'
        type: choice
        options:
          - full_lto
          - thin_lto
        default: full_lto

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            bc bison flex build-essential zip curl libssl-dev \
            ccache python3 rsync lz4 git unzip wget \
            libelf-dev liblz4-tool dwarves

      - name: Download Proton Clang (LLVM 17)
        run: |
          echo "⚙️ Downloading Proton Clang LLVM-17 (compatible build)..."
          wget https://github.com/kdrag0n/proton-clang/archive/refs/tags/20231126.tar.gz -O clang.tar.gz
          mkdir clang && tar -xf clang.tar.gz --strip-components=1 -C clang

      - name: Clone Danda Kernel Source (walt branch)
        run: |
          git clone --depth=1 -b walt https://github.com/Danda420/kernel_xiaomi_sm8250 kernel_tree

      - name: Configure & Build Kernel
        id: build_kernel
        run: |
          export PATH="$PWD/clang/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="github"
          export KBUILD_BUILD_HOST="actions"
          export KBUILD_BUILD_TIMESTAMP="$(TZ=Asia/Jakarta date)"
          cd kernel_tree

          echo "🧩 Using defconfig: vendor/alioth_defconfig"
          make O=out vendor/alioth_defconfig

          # Optional custom version
          if [[ "${{ github.event.inputs.CUSTOM_VERSION }}" != "" ]]; then
            sed -i "s/CONFIG_LOCALVERSION=\".*\"/CONFIG_LOCALVERSION=\"${{ github.event.inputs.CUSTOM_VERSION }}\"/" \
              arch/arm64/configs/vendor/alioth_defconfig || true
          fi

          # Optional LTO config
          if [[ "${{ github.event.inputs.LTO_TYPE }}" == "thin_lto" ]]; then
            sed -i '/CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set' arch/arm64/configs/vendor/alioth_defconfig || true
            sed -i '/# CONFIG_LTO_CLANG_THIN is not set/c\CONFIG_LTO_CLANG_THIN=y' arch/arm64/configs/vendor/alioth_defconfig || true
          fi

          echo "🚀 Building kernel..."
          make -j$(nproc) O=out CC=clang LLVM=1 LLVM_IAS=1 2>&1 | tee build.log

          if [[ ! -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            echo "❌ Kernel build failed, Image.gz-dtb not found."
            exit 1
          fi

          cp out/arch/arm64/boot/Image.gz-dtb ../Image.gz-dtb
          echo "BUILD_STATUS=0" >> $GITHUB_ENV

      - name: Save build fail summary
        if: failure()
        run: |
          cd kernel_tree
          tail -n 30 build.log > ../build_fail_summary.txt

      - name: Upload Kernel Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: DandaKernel-Alioth
          path: Image.gz-dtb

      - name: Upload Build Log (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-failure-log
          path: build_fail_summary.txt

  package:
    needs: build
    if: success()
    runs-on: ubuntu-22.04

    steps:
      - name: Download kernel artifact
        uses: actions/download-artifact@v4
        with:
          name: DandaKernel-Alioth
          path: out

      - name: Clone AnyKernel3
        run: git clone --depth=1 https://github.com/osm0sis/AnyKernel3 AnyKernel3

      - name: Package flashable zip
        run: |
          cp out/Image.gz-dtb AnyKernel3/zImage || true
          cd AnyKernel3
          zipname="DandaKernel-Alioth${{ github.event.inputs.CUSTOM_VERSION }}-$(date +%Y%m%d).zip"
          zip -r9 "../$zipname" * -x .git* README.md *placeholder*
          echo "ZIP_NAME=$zipname" >> $GITHUB_ENV

      - name: Upload flashable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}

  telegram_notify:
    needs: [build, package]
    runs-on: ubuntu-22.04

    steps:
      - name: Telegram Success Notify
        if: success()
        run: |
          MESSAGE="✅ *Build Sukses!*\n\
          ⚙️ Danda Kernel (WALT branch)\n\
          🧩 Defconfig: alioth_defconfig\n\
          🏷 Version: ${{ github.event.inputs.CUSTOM_VERSION }}\n\
          🧠 LTO: ${{ github.event.inputs.LTO_TYPE }}\n\
          📅 $(date +'%Y-%m-%d %H:%M')"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d parse_mode="Markdown" \
          -d text="$MESSAGE"

      - name: Telegram Fail Notify
        if: failure()
        run: |
          LOG_FILE="build_fail_summary.txt"
          LOG_CONTENT=$(cat "$LOG_FILE" 2>/dev/null || echo "No summary log.")
          MESSAGE="❌ *Build Gagal!*\n\
          ⚙️ Danda Kernel (WALT branch)\n\
          🧩 Defconfig: alioth_defconfig\n\
          🏷 Version: ${{ github.event.inputs.CUSTOM_VERSION }}\n\n\
          🔍 *Ringkasan Error:*\n\`\`\`\n${LOG_CONTENT}\n\`\`\`"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TG_CHAT_ID }} \
          -d parse_mode="Markdown" \
          -d text="$MESSAGE"
